/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define MULT KP_MULTIPLY
#define BTC BT_CLR
#define BT1 BT_SEL 0
#define BT2 BT_SEL 1
#define BT3 BT_SEL 2
#define BT4 BT_SEL 3
#define BT5 BT_SEL 4

/ {
        macros {
        mptr: mptr {
            label = "ZM_ptr";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp MINUS &kp GREATER_THAN>
                ;
            };
        };

        behaviors {
        volbriU: vol_brightU {
            compatible = "zmk,behavior-mod-morph";
            label = "VOL_BRIGHTU";
            #binding-cells = <0>;
            bindings = <&kp C_VOLUME_UP>, <&kp C_BRI_UP>;
            mods = <(MOD_LSFT)>;
                };
        volbriD: vol_brightD {
            compatible = "zmk,behavior-mod-morph";
            label = "VOL_BRIGHTD";
            #binding-cells = <0>;
            bindings = <&kp C_VOLUME_DOWN>, <&kp C_BRI_DN>;
            mods = <(MOD_LSFT)>;
                };
        bade: back_dell {
            compatible = "zmk,behavior-mod-morph";
            label = "BACK_DELL";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DEL>;
            mods = <(MOD_LSFT)>;
                };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// [ RAIS ]  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  | ;:  | '"   |
// [ COMM ]  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   | ,<  | .>  | /?  | |\   |
//                    [ CTR ] ENT | SHF |   | LWR | SPC  [ OPT ]
                        bindings = <
   &kp TAB   &kp Q &kp W &kp E &kp R &kp T   &kp Y  &kp U  &kp I     &kp O   &kp P    &bade
   &mo 2     &kp A &kp S &kp D &kp F &kp G   &kp H  &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &kp LGUI  &kp Z &kp X &kp C &kp V &kp B   &kp N  &kp M  &kp COMMA &kp DOT &kp FSLH &kp BSLH
                   &kp LCTRL  &kp RET  &kp LSHFT  &mo 1  &kp SPACE  &kp RALT
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// | CAPS |     |     |     |     |     |   | `~  |  7  |  8  |  9  | -_ | =+ |
// [ COMM ]     |     |     |     |     |   | ->  |  4  |  5  |  6  | [{ | ]} |
// [ SHFT ]     |     |     |     |     |   |  0  |  1  |  2  |  3  |  ( |  ) |
//                    [ CTR ] ENT |     |   |     |     | OPT |
                        bindings = <
   &kp CAPS  &trans  &trans  &trans  &trans  &trans     &kp GRAVE  &kp N7  &kp N8  &kp N9  &kp MINUS  &kp EQUAL
   &trans    &trans  &trans  &trans  &trans  &trans     &mptr      &kp N4  &kp N5  &kp N6  &kp LBKT   &kp RBKT
   &trans    &trans  &trans  &trans  &trans  &trans     &kp N0     &kp N1  &kp N2  &kp N3  &kp LPAR   &kp RPAR
                             &trans  &trans  &trans     &trans     &trans  &trans
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  ESC | BT1 | VOL+|     |     |     |   |     |     |     |     |  UP |     |
// [ COMM ] BT2 | VOL-|     |     |     |   |     |     |     |     | LFT | RGT |
// [ SHFT ] BT3 | BT4 |     |     |     |   |     |     |     |     | DWN |     |
//                    [ CTR ] ENT |     |   |     |     [ OPT ]
                        bindings = <
   &kp ESC  &bt BT1  &volbriU  &trans  &trans  &trans     &trans  &trans  &trans  &trans &kp UP    &transL
   &trans   &bt BT2  &volbriD  &trans  &trans  &trans     &trans  &trans  &trans  &trans &kp LEFT  &kp RIGHT
   &trans   &bt BT3  &bt BT4   &trans  &trans  &trans     &trans  &trans  &trans  &trans &kp DOWN  &trans
                    	       &trans  &trans  &trans     &trans  &trans  &trans
                        >;
                };
        };
};
